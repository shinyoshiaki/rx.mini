{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/core/index.ts"],"names":[],"mappings":";;AAOA;IAAA;QAAA,iBAkDC;QAjDS,UAAK,GAAc,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAEnD,YAAO,GAAG,UAAC,IAAO;YAChB,KAAiB,UAAgB,EAAhB,KAAA,KAAI,CAAC,KAAK,CAAC,KAAK,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;gBAA9B,IAAI,IAAI,SAAA;gBACX,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjB;QACH,CAAC,CAAC;QAEF,gBAAW,GAAG;YACZ,KAAiB,UAAgB,EAAhB,KAAA,KAAI,CAAC,KAAK,CAAC,KAAK,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;gBAA9B,IAAI,IAAI,SAAA;gBACX,IAAI,CAAC,IAAI,CAAC,SAAgB,CAAC,CAAC;aAC7B;QACH,CAAC,CAAC;QAEF,cAAS,GAAG,UAAC,IAAkB;YAC7B,IAAM,EAAE,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC;YAC5B,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,EAAE,IAAA,EAAE,CAAC,CAAC;YACpC,KAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAM,WAAW,GAAG;gBAClB,KAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CACxC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI,EAAtB,CAAsB,CAC/B,CAAC;YACJ,CAAC,CAAC;YACF,OAAO,EAAE,WAAW,aAAA,EAAE,CAAC;QACzB,CAAC,CAAC;QAEF,mBAAc,GAAG;YACf,KAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QACvC,CAAC,CAAC;QAEF,SAAI,GAAG,UAAC,IAAkB;YACxB,IAAM,GAAG,GAAG,KAAI,CAAC,SAAS,CAAC,UAAA,IAAI;gBAC7B,GAAG,CAAC,WAAW,EAAE,CAAC;gBAClB,IAAI,CAAC,IAAI,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,cAAS,GAAG,UAAC,SAAkB;YAC7B,OAAA,IAAI,OAAO,CAAI,UAAC,OAAO,EAAE,MAAM;gBAC7B,IAAM,OAAO,GACX,SAAS;oBACT,UAAU,CAAC;wBACT,MAAM,CAAC,yBAAyB,CAAC,CAAC;oBACpC,CAAC,EAAE,SAAS,CAAC,CAAC;gBAChB,KAAI,CAAC,IAAI,CAAC,UAAA,IAAI;oBACZ,IAAI,OAAO;wBAAE,YAAY,CAAC,OAAO,CAAC,CAAC;oBACnC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;QAVF,CAUE,CAAC;IACP,CAAC;IAAD,YAAC;AAAD,CAAC,AAlDD,IAkDC","sourcesContent":["type EventFunc<T> = (data: T) => void;\n\ntype IEvent<T> = {\n  stack: { func: EventFunc<T>; id: number }[];\n  index: number;\n};\n\nexport default class Event<T = null> {\n  private event: IEvent<T> = { stack: [], index: 0 };\n\n  execute = (data: T) => {\n    for (let item of this.event.stack) {\n      item.func(data);\n    }\n  };\n\n  executeNull = () => {\n    for (let item of this.event.stack) {\n      item.func(undefined as any);\n    }\n  };\n\n  subscribe = (func: EventFunc<T>) => {\n    const id = this.event.index;\n    this.event.stack.push({ func, id });\n    this.event.index++;\n    const unSubscribe = () => {\n      this.event.stack = this.event.stack.filter(\n        item => item.id !== id && item\n      );\n    };\n    return { unSubscribe };\n  };\n\n  allUnsubscribe = () => {\n    this.event = { stack: [], index: 0 };\n  };\n\n  once = (func: EventFunc<T>) => {\n    const off = this.subscribe(data => {\n      off.unSubscribe();\n      func(data);\n    });\n  };\n\n  asPromise = (timelimit?: number) =>\n    new Promise<T>((resolve, reject) => {\n      const timeout =\n        timelimit &&\n        setTimeout(() => {\n          reject(\"Event asPromise timeout\");\n        }, timelimit);\n      this.once(data => {\n        if (timeout) clearTimeout(timeout);\n        resolve(data);\n      });\n    });\n}\n"]}